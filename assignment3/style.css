/*
  For this project, I wanted to create a playful and lighthearted experience, especially since we were given a lot of creative freedom with the concept. 
  I was inspired by things like blind boxes and fortune cookies. Instead of figurines or fortunes, I thought it’d be fun to hand out random (and mostly useless)
  pieces of advice. That’s when I hit a design block: how do I actually present and 'store' these advice boxes?

  That’s when the idea of a vending machine came to mind. There’s basically a vending machine for anything nowadays, so it felt like the perfect interactive format for 
  users to 'choose' their mystery box of advice. Plus, it naturally worked with the assignment’s requirement for a click interaction.

  As for the overall style, I tried to reflect that chaotic-fun energy through a bold and playful visual direction. 
  I used a bright colour palette, soft shadows, rounded corners, and oversized elements to make the interface feel friendly and approachable. 
  As for the font choice, I went with something scribbly and handwritten, kind of like it was written with a permanent marker. 
  Altogether, the design is meant to feel informal, fun, and not to be taken too seriously, just like the advice itself.
*/

/* 
Font Family
font-family: "Caveat Brush", cursive; 
font-family: "chantal", sans-serif;

Colour:
Dull Purple: #514f65
Light Blue: #79e6f2
Yellow: #D5C56B
Dark Blue: #13121f
Light Pink: #F29188
Dark Pink: #D96A88

*/

/* 
  Reset default margin and padding on html and body so the layout fills the entire viewport 
  and no unexpected spacing around edges.
*/
html,
body {
  margin: 0;
  padding: 0;
  /* Make sure body takes full height for the background to cover */
  height: 100%;
}

/* 
  Set a background image that covers the whole page without repeating, 
  and keep it centered so it looks good on any screen size.
*/
body {
  background-image: url("img/background.png");
  /* Makes sure the image fills the entire screen */
  background-size: cover;
  /* Keeps the image centered on the screen */
  background-position: center;
  /* Prevents the image from tiling */
  background-repeat: no-repeat;
}

/*--------------------------------*/
/* Header buttons                 */
/*--------------------------------*/

/* 
  Using flexbox to push the images to the right side. 
  Added padding and a gap to improve the layout.
*/

.header {
  display: flex;
  /* Align items to the right */
  justify-content: end;
  padding: 20px;
  gap: 20px;
}

/* Set fixed size for info button to keep layout consistent */
#info-btn {
  width: 50px;
  height: 50px;
}

/* Slight shrink effect on hover for a subtle interactive feel */
#info-btn:hover {
  transform: scale(0.9);
}

/* Set fixed size for sound button to match info button */
#sound-on {
  width: 50px;
  height: 50px;
}

/* Same hover effect for consistency */
#sound-on:hover {
  transform: scale(0.9);
}

/*--------------------------------*/
/* Machine                        */
/*--------------------------------*/

/* Container holding the vending machine and the sign.
  Uses flexbox to space out the sign and machine evenly,
  aligns them at the bottom to keep everything lined up nicely,
  and adds top margin and padding for overall spacing.v*/
.machine-container {
  display: flex;
  justify-content: space-evenly;
  align-items: flex-end;
  margin-top: 120px;
  padding: 20px;
  /* space between sign and machine */
  gap: 50px;
}

/* Wrapper around the vending machine image, positioned relative
  to allow positioning of buttons inside it. This was done as there 
  was elements that needed to be animated inside of the vending machine*/
.machine-wrapper {
  position: relative;
  display: inline-block;
}

/* Invisible clickable buttons placed over the machine image. For users to click for the interaction to take place.
  They’re absolutely positioned to align with button spots on the machine. */
.machine-button {
  position: absolute;
  width: 30px;
  height: 30px;
  opacity: 0%;
  border: none;
  border-radius: 50%;
  cursor: pointer;
  /*used for testing when i needed to place the buttons, 
  I change the colour to be able to see them. However since 
  I wanted to create some sort of state change to allow users 
  to know where they can press, I had to use transparent so that 
  the image replaced could be seen without any boarder */
  background-color: transparent;
}

/* On hover, button changes to give visual feedback, helping users 
know where they can click.*/
.machine-button:hover {
  opacity: 100%;
  transform: scale(1.2);
  background-color: none;
}

/* 
  The hover button. Since it was an image I have to adjust the opactity this way, having it be
  fully visible by default and smoothly fade out when hidden.
  Pointer events disabled so they don't block button clicks.
*/
.hover-btn {
  opacity: 1;
  transition: opacity 0.3s ease;
  pointer-events: none;
}

/* Hide the hover button image by fading out */
.hover-btn.hidden {
  opacity: 0;
}

/* Positioning of each button to align exactly on the vending machine image */
#button1 {
  top: 153px;
  left: 128px;
}
#button2 {
  top: 153px;
  left: 209px;
}
#button3 {
  top: 153px;
  left: 290px;
}
#button4 {
  top: 153px;
  left: 376px;
}
#button5 {
  top: 262px;
  left: 128px;
}
#button6 {
  top: 262px;
  left: 209px;
}
#button7 {
  top: 262px;
  left: 290px;
}
#button8 {
  top: 371px;
  left: 128px;
}
#button9 {
  top: 371px;
  left: 209px;
}
#button10 {
  top: 371px;
  left: 290px;
}

/*--------------------------------*/
/* Can Animation                  */
/*--------------------------------*/

/* This is animation for the can. Since it is a vending machine, 
I needed to create the can dropping animation for when the can is dispensed. 
For this I used keyframes to animate it, adjusting the position and rotate to 
achieve the motion of the can dropping. Adding transition to ensure a smoother animation*/

#can {
  position: absolute;
  /* initial position */
  top: 450px;
  /* initial position */
  left: 250px;
  width: 50px;

  /* Having to start it as transparent as it needed to be hidden */
  opacity: 0;
  transform: translateY(0);
  /* Ensures any rotation happens from the can's center, making motion feel more natural */
  transform-origin: center center;
  transform-style: preserve-3d;
  cursor: pointer;
  transition: opacity 0.4s ease, transform 0.6s ease;
  z-index: 10;
  pointer-events: auto;
}

/* Using fowards to keep the object at the same spot as when it ends. 
Otherwise it will go back to the initial position */
#can.animate {
  animation: dropCan 0.5s ease-out forwards;
  opacity: 1;
}

@keyframes dropCan {
  0% {
    transform: translateY(0) rotate(0);
    opacity: 0;
  }
  20% {
    opacity: 1;
  }
  100% {
    transform: translateY(72px) rotate(90deg);
    opacity: 1;
  }
}

/* this was to move the can to the center of the screen for the reveal. Created this animation 
as I needed a way to reveal the cards. Hence thinking of creating a 'move to center' animation 
before having the cards be revealed. Again using the transition to make this animation */
#can.centered {
  top: 36%;
  left: 46%;
  transform: translate(-50%, -50%) rotate(0deg);
  /* Scale the can up to make it a focus element (like opening a blind box) */
  width: 250px;
  opacity: 1;
  z-index: 10;
  transition: all 0.5s ease;
  pointer-events: auto;
}

/*--------------------------------*/
/* Overlay                        */
/*--------------------------------*/

/* this is for the  full-screen semi-transparent dark layer used to focus user attention on the can.*/
#overlay {
  position: fixed;
  top: 0;
  left: 0;
  width: 100vw;
  height: 100vh;
  background-color: rgba(0, 0, 0, 0.75);
  z-index: 1;
  opacity: 1;
  pointer-events: none;
  transition: opacity 0.3s ease;
}

/*--------------------------------*/
/* Shake Animations                 */
/*--------------------------------*/

/* I added these shake animations to add some playful feedback 
  when something happens. Like when the can or machine 'shakes' a bit. 
  It makes the interaction feel more alive and fun, instead of static.
  These subtle shakes mimic real-world jitteriness and it is have the website be a little more playful*/

/* 
  The 'shake' keyframes make an element rotate back and forth around its center.
  I kept the translate(-50%, -50%) here to keep the element centered during the shake,
  and the rotate values go between -5deg and 5deg for a quick, small shaking effect.
*/
@keyframes shake {
  0%,
  100% {
    transform: translate(-50%, -50%) rotate(0);
  }
  20%,
  60% {
    transform: translate(-50%, -50%) rotate(-5deg);
  }
  40%,
  80% {
    transform: translate(-50%, -50%) rotate(5deg);
  }
}

/* Applying the shake animation to any element with the 'shake' class.
  The animation lasts 0.5 seconds with ease-in-out timing for smooth motion.*/
.shake {
  animation: shake 0.5s ease-in-out;
}

/* 'machineShake' keyframes are for shaking the vending machine left and right.
  I chose a horizontal shake (translateX) for this to simulate the machine trembling 
  slightly when dispensing a can, simulate a vending machine in real life, where sometimes
  it shakes before dispensing a drink */

@keyframes machineShake {
  0%,
  100% {
    transform: translateX(0);
  }
  20%,
  60% {
    transform: translateX(-5px);
  }
  40%,
  80% {
    transform: translateX(5px);
  }
}

/* The 'machineShake' class applies this side-to-side shaking effect.*/
.machineShake {
  animation: machineShake 0.4s ease-in-out;
}

/*--------------------------------*/
/* Steps Text                     */
/*--------------------------------*/

/* This was to help users know what to do next. Since I had an image that i used as a background for this step instruction menu thing
I needed to place the text right in front of it, giving the illusion of a instruction board.*/

/* Container for the step instructions */
.step-text {
  position: fixed;
  top: 73%;
  left: 83.5%;
  max-width: 200px;
  transform: translateX(-50%);
  font-family: "chantal", sans-serif;
  font-size: 2.3rem;
  color: white;
  opacity: 1;
  transition: opacity 1.5s ease;
  z-index: 1;
  text-align: center;
}

/* Paragraph inside step text: make the instructions stand out */
.step-text p {
  font-weight: bolder;
}

/* Heading inside step text: smaller and lighter for less emphasis */
.step-text h1 {
  font-weight: lighter;
  font-size: 1.2rem;
}

/*--------------------------------*/
/* Text "Click Me"                */
/*--------------------------------*/
/* this was made for the users to easily know what step to take next. 
Just in case it wasnt clear enough on the intruction board. Did this 
only for this part of the animations as after some feedback, it was suggest 
that I do that just to make this instruction extra clear */

.click-can-text {
  position: absolute;
  top: 47%;
  left: 50%;
  transform: translateX(-50%);
  font-family: "chantal", sans-serif;
  font-size: 1.7rem;
  font-weight: bolder;
  color: white;
  opacity: 1;
  transition: opacity 1.5s ease;

  /* so it doesn’t block clicks */
  pointer-events: none;
  z-index: 20;
  text-shadow: 2px 2px 5px rgba(0, 0, 0, 0.5);
}

/*--------------------------------*/
/* Card                           */
/*--------------------------------*/

/* this container was made to hold the card that appears at the end of the animation. 
I needed it to be centered on the screen so that i could transition from can to card.
 */

.card-container {
  perspective: 1000px;
  position: fixed;
  top: 50%;
  left: 50%;
  width: 300px;
  height: 405px;
  transform-style: preserve-3d;
  transform-origin: center center;
  transform: translate(-50%, -50%);
  cursor: pointer;
  z-index: 20;
  opacity: 0;
  transition: opacity 0.6s ease;
}

/* Since there was going to be a flip animation to reveal the card, 
i needed to use preserve-3d to create a more realistic animation  */
.card {
  width: 100%;
  height: 100%;
  transition: transform 0.6s ease;
  transform-style: preserve-3d;
  position: relative;
}

/*--------------------------------*/
/* Card Animation                 */
/*--------------------------------*/

/* these are the front and back faces of the card used for the flipping
 animation. I referenced the flipping animation we did during class as a 
 guide for the animation here*/

.card-face {
  position: absolute;
  width: 100%;
  height: 100%;
  backface-visibility: hidden;
  border-radius: 12px;
  top: 0;
  left: 0;
}

/* this is the back side of the card, rotated 180 degrees so it's ready to be flipped into view. 
without this, both sides would just stack and you'd never see the back on flip. */

.card-face.back {
  transform: rotateY(180deg);
}

/* added this tiny scale down on hover to give the user feedback that it's clickable. 
just to make it feel a bit more interactive. */

.card:hover {
  scale: 0.98;
}

.card-face {
  position: absolute;
  width: 100%;
  height: 100%;
  backface-visibility: hidden;
  border-radius: 12px;
  overflow: hidden;
}

/* this is just making sure the image on each card face fills the whole space properly 
without stretching weirdly. using object-fit: cover to maintain aspect ratio while filling. */

.card-face img {
  width: 100%;
  height: 100%;
  object-fit: cover;
  display: block;
}

/* when I add the "flipped" class to the card, it rotates 180 degrees to show the back. 
this is how the flip effect is actually triggered when needed. */

.flipped {
  transform: rotateY(180deg);
}

/*--------------------------------*/
/* Retry Button                   */
/*--------------------------------*/

/* this is the retry  button that shows up at the end. For this I just tried
 to keep in mind the previous styling that i used to give it the consistency */

#retry-btn {
  font-family: "chantal", sans-serif;
  margin-top: 10px;
  margin-left: 80px;
  padding: 15px 40px;
  font-size: 1.2rem;
  background-color: #13121f;
  color: white;
  border: 2px solid white;
  border-radius: 10px;
  cursor: pointer;
  transition: opacity 0.4s ease, background-color 0.3s ease;
}

.retry-btn {
  opacity: 1;
  pointer-events: auto;
}

/* hover effect used to create some interaction,
helping users feel like the button is responding to them. */

#retry-btn:hover {
  background-color: #514f65;
  cursor: pointer;
}

/*--------------------------------*/
/* Screen Warning                 */
/*--------------------------------*/

/* This overlay is for warning users when their screen size isn’t ideal for the experience.
   I wanted it to cover the whole screen, be centered, and feel consistent with the aesthetic.
  Since majority of my code relied on the exact position of the buttons, I had to find a way to
   have the screen be blocked if the screen was not in an ideal size*/

#screen-warning {
  font-family: "chantal", sans-serif;
  position: fixed;
  top: 0;
  left: 0;
  width: 100vw;
  height: 100vh;
  background-color: #13121f;
  color: white;
  font-size: 2rem;
  display: flex;
  align-items: center;
  justify-content: center;
  z-index: 50;
  pointer-events: none;
  opacity: 0;
  transition: opacity 0.3s ease;
}

/* Created a new class as with visible it help to make the fade in and
 out smoother since the orginal state is no opacity.
*/

#screen-warning.visible {
  opacity: 1;
  pointer-events: auto;
}

/* Just some styling for the text inside, so it’s centered and doesn’t run off the screen. */
#screen-warning p {
  text-align: center;
  max-width: 600px;
  padding: 0 20px;
}
/*--------------------------------*/
/* Information PopUp              */
/*--------------------------------*/

/* I made this popup to give users a short intro and credit section before they start.
   It appears on top of everything when the site loads and gives a clear "close" option. 
   While designing it i just remember to keep in mind the colour palette, making it match the website. */

.information-popup {
  font-family: "chantal", sans-serif;
  position: fixed;
  top: 0;
  left: 0;
  width: 100%;
  height: 100%;
  display: flex;
  justify-content: center;
  align-items: center;
}

/*this content creates the box around the text*/
.information-popup-content {
  position: relative;
  background-color: #f29188;
  padding: 60px;
  border-radius: 12px;
  text-align: center;
  max-width: 700px;
  box-shadow: 0 0 20px rgba(0, 0, 0, 0.3);
  color: bacl;
}

/* title inside the popup, making it a bit bolder to give hierarchy */
.information-popup h1 {
  margin-bottom: 5px;
  font-size: 1.5rem;
  font-weight: bold;
}

#logo-name {
  font-family: "chantal", sans-serif;
  font-size: 2.5rem;
}

#name {
  font-size: small;
}

/* close (X) button */
#close-info-btn {
  position: absolute;
  top: 20px;
  right: 30px;
  justify-content: right;
  background-color: #26233e;
  color: white;
  border-radius: 50%;
  height: 30px;
  width: 30px;
  text-align: center;
  font-size: 1rem;
  padding: 0;
  box-shadow: none;
  cursor: pointer;
  border: 1px solid #514f65;
}

#close-info-btn:hover {
  color: white;
  transform: scale(1.2);
  transition: transform 0.2s ease; /* Optional for smooth animation */
  background-color: #514f65;
  border: none;
}

/* button at the bottom of popup to show attribution or more info
   this was made so people could access credits creating another popup as i didnt want to overcrowd the information popup */
.attribution-btn {
  padding: 10px 20px;
  border-radius: 10px;
  background-color: #514f65;
  color: white;
  border: none;
  font-size: 1rem;
  cursor: pointer;
  margin-bottom: -100px;
}

/* hover effect to reinforce it's clickable */
.attribution-btn:hover {
  background-color: #13121f;
  color: white;
  transform: scale(1.1);
  transition: transform 0.2s ease;
}
/*--------------------------------*/
/* Attribution PopUp              */
/*--------------------------------*/
/* This is just like the info popup, but used specifically to show attribution.*/

.attribution-popup {
  position: fixed;
  top: 0;
  left: 0;
  width: 100%;
  height: 100%;
  display: flex;
  justify-content: center;
  align-items: center;
}

/*this content creates the box around the text*/
#attribution-popup-content {
  font-family: "chantal", sans-serif;
  position: relative;
  background-color: white;
  padding: 60px;
  border-radius: 12px;
  max-width: 500px;
  height: 320px;
  box-shadow: 0 0 20px rgba(0, 0, 0, 0.3);
  color: black;
  font-weight: lighter;
  font-size: 0.8rem;
  display: flex;
  justify-content: center;
  align-items: center;
  text-align: center;
}

#attribution-header {
  justify-content: center;
  font-weight: bold;
  font-size: 1.3rem;
  margin-bottom: 40px;
}

/* this is the close (X) button in the same style as the other popups for consistency */
#close-attribution-btn {
  position: absolute;
  top: 20px;
  right: 30px;
  justify-content: right;
  background-color: #26233e;
  color: white;
  border-radius: 50%;
  height: 30px;
  width: 30px;
  text-align: center;
  font-size: 1rem;
  padding: 0;
  box-shadow: none;
  cursor: pointer;
  border: 1px solid #514f65;
}

#close-attribution-btn:hover {
  color: white;
  transform: scale(1.2);
  transition: transform 0.2s ease; /* Optional for smooth animation */
  background-color: #514f65;
}

/*--------------------------------*/
/* Other                          */
/*--------------------------------*/

/* I made this reusable hidden class to hide any element with a fade-out feel.
   Couldn’t just use "display: none" because I wanted smooth transitions and to
   still let things fade in/out with pointer control (and maybe animate if needed).
   Reused across a bunch of popups. */

.hidden {
  opacity: 0;
  pointer-events: none;
  /* prevents clicks */
  pointer-events: none;
  visibility: hidden;
  position: fixed;
}
